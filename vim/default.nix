{ vim_configurable, python3, vimPlugins, clang-tools, omnisharp-roslyn, callPackage, lib }:
let ftPlugins = with vimPlugins; [
        { plug = vim-nix; ft = "nix"; }
    ];
    plugins = builtins.attrNames (builtins.readDir ./vimrc.d);
in (vim_configurable.override {
    python = python3;
}).customize {
    name = "leovim";
    vimExecutableName = "vim";
    gvimExecutableName = "gvim";

    vimrcConfig = {
        customRC = builtins.readFile ./vimrc
            + "\n\" Filetype plugins (autogenerated) {{{\n"
            + lib.concatMapStrings (x:
                "autocmd FileType ${x.ft} :packadd ${x.plug.pname}\n"
            ) ftPlugins
            + "\" }}}\n\n\" vimrc.d/ contents:\n\n" + lib.concatMapStrings (x:
                "\" ${x}\n${(builtins.readFile (./vimrc.d + "/${x}"))}\n\n"
            ) plugins
            + "\" LSP paths (autogenerated) {{{\n"
            + "let g:OmniSharp_server_path = '${omnisharp-roslyn}/bin/omnisharp'\n"
            + "let g:ale_cpp_clangd_executable = '${clang-tools}/bin/clangd'\n"
            + "\" }}}";

        packages.leovim = with vimPlugins; {
            start = [
                vim-hardtime
                (callPackage ./solarized8.nix {})
                (callPackage ./graphql.nix {})
                (callPackage ./omnisharp-vim.nix {})
                editorconfig-vim
                vim-sleuth
                (callPackage ./ale.nix {})
                (callPackage ./vimspector.nix {})
            ];

            opt = [ ]
                ++ map (x: x.plug) ftPlugins;
        };
    };
}
