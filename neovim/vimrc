" Misc settings {{{
if $TERM ==# 'tmux-256color' && $TMUX_FORCE_NO_TRUECOLOR !=# '1'
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
else
    let g:solarized_use16 = 1
endif

set nocp
set history=50                  " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg
set backspace=indent,eol,start  " more powerful backspacing
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab ai
set relativenumber wrap shiftround
let mapleader = ","
let localleader = "\\"
set encoding=utf-8
set statusline=%f\ (%y)
set pastetoggle=<f5>
set foldlevelstart=0
set hlsearch incsearch
set t_PS=[200~
let &t_SI .= "\<Esc>[6 q"
let &t_EI .= "\<Esc>[2 q"
set undofile

set background=dark
colorscheme solarized8_flat

filetype plugin indent on
" }}}

" Restore cursor {{{
set viminfo='10,\"100,:20,%,n~/.viminfo

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END
" }}}

" Formatting {{{

" tabs
highlight SpecialKey ctermfg=1
set list
set listchars=tab:\ \ ,trail:â—Œ
" }}}

" Mappings {{{
noremap - ddp
noremap _ ddkP
inoremap <c-d> <esc>"_ddi
inoremap <c-u> <esc>maviwU`aa
nnoremap <c-u> maviwU`a
nnoremap <leader>ev :vsplit $HOME/Dotfiles/neovim/vimrc<cr>
nnoremap <leader>sv :source $HOME/Dotfiles/neovim/vimrc<cr>
nnoremap H ^
nnoremap L $
inoremap jk <esc>
inoremap <esc> <nop>
nnoremap <leader>w <c-w>
onoremap p i(
nnoremap <leader>c :nohlsearch<cr>
nnoremap <leader>cn :cnext<cr>
nnoremap <leader>cN :cprevious<cr>
nnoremap <leader>a :ALECodeAction<cr>
nnoremap <leader>f :ALEFix<cr>
" }}}

" Plugin settings {{{
" hardtime
let g:hardtime_allow_different_key = 1
let g:hardtime_default_on = 1
let g:list_of_disabled_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]

" OmniSharp
let g:OmniSharp_selector_ui = ''
let g:OmniSharp_loglevel = 'none' " workaround for log file path being in store
let g:OmniSharp_highlighting = 3

" ALE
let g:ale_linters = { 'cs': ['OmniSharp'], 'cpp': ['clangd'], 'c': ['clangd'], 'rust': ['analyzer'] }
let g:ale_fixers = { 'javascript': ['eslint'], 'rust': ['rustfmt'] }
let g:ale_lint_on_text_changed = 'always'

if empty($RA_TARGET)
  let g:ale_rust_analyzer_config = {'checkOnSave': {'command': 'clippy'}}
else
  let g:ale_rust_analyzer_config = {'checkOnSave': {'command': 'clippy'}, 'cargo': {'target': $RA_TARGET}}
endif

" Vimspector
let g:vimspector_base_dir = expand('$HOME/.vimspector')
let g:vimspector_enable_mappings = 'HUMAN'

" nvim-treesitter
lua <<EOF
local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
parser_config.pioasm = {
  install_info = {
    url = "https://github.com/leo60228/tree-sitter-pioasm",
    branch = "main",
    files = {"src/parser.c", "src/scanner.c"}
  },
}

require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    custom_captures = {
      ["comment"] = "Comment",
      ["string.special"] = "Special",
      ["include"] = "Keyword",
      ["punctuation.delimiter"] = "NONE",
      ["punctuation.bracket"] = "NONE",
    },
  },
  playground = {
    enable = true,
  },
  refactor = {
    navigation = {
      enable = true,
    },
  },
}
EOF

hi default link TSVariable Identifier

" vim-auto-save
let g:auto_save = 0

" }}}

" Filetype commands {{{
augroup vimrc
    autocmd!

    autocmd FileType rust nnoremap <buffer> <localleader>c I// <esc>
    autocmd FileType rust nnoremap <buffer> <localleader>sr ^O#[serde(rename = "")]<esc>^ci"
    autocmd FileType vim nnoremap <buffer> <localleader>c I" <esc>

    autocmd FileType rust iabbrev <buffer> retu return
    autocmd FileType rust iabbrev <buffer> return <nop>

    autocmd FileType rust iabbrev <buffer> return <nop>

    autocmd FileType rust let b:auto_save = 1

    autocmd BufRead,BufNewFile *.nix set filetype=nix
    autocmd BufRead,BufNewFile *.pio set filetype=pioasm

    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}
