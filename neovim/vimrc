" Misc settings {{{
set nocp
set history=50                  " keep 50 lines of command line history
set ruler                       " show the cursor position all the time
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.png,.jpg
set backspace=indent,eol,start  " more powerful backspacing
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab ai
set relativenumber wrap shiftround
let mapleader = ","
let localleader = "\\"
set encoding=utf-8
set statusline=%f\ (%y)
set foldlevelstart=0
set hlsearch incsearch
set t_PS=[200~
let &t_SI .= "\<Esc>[6 q"
let &t_EI .= "\<Esc>[2 q"
set undofile
set shortmess-=F
set updatetime=300
set completeopt-=preview

set termguicolors
set background=dark
colorscheme vriselenized

filetype plugin indent on
" }}}

" Restore cursor {{{
set viminfo='10,\"100,:20,%,n~/.viminfo

function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END
" }}}

" Formatting {{{

" tabs
highlight SpecialKey ctermfg=1
set list
set listchars=tab:\ \ ,trail:â—Œ
" }}}

" Mappings {{{
noremap - ddp
noremap _ ddkP
inoremap <c-d> <esc>"_ddi
inoremap <c-u> <esc>maviwU`aa
nnoremap <c-u> maviwU`a
nnoremap <leader>ev :vsplit $HOME/dotfiles/neovim/vimrc<cr>
nnoremap <leader>sv :source $HOME/dotfiles/neovim/vimrc<cr>
nnoremap H ^
nnoremap L $
inoremap jk <esc>
inoremap <esc> <nop>
nnoremap <leader>w <c-w>
onoremap p i(
inoremap <silent><expr> <c-space> coc#refresh()
inoremap <c-space> <c-x><c-o>
nnoremap <leader>c :nohlsearch<cr>

function! s:EnableRelativeAutocomplete() abort
  let b:relative_autocomplete_cleanup_pending = 1
  lcd %:p:h
endfunction

function! s:DisableRelativeAutocomplete() abort
  if exists('b:relative_autocomplete_cleanup_pending') && b:relative_autocomplete_cleanup_pending
    lcd -
    let b:relative_autocomplete_cleanup_pending = 0
  endif
endfunction

inoremap <C-x><C-f> <C-o>:call <SID>EnableRelativeAutocomplete()<CR><C-x><C-f>

augroup relative_file_autocomplete
  autocmd!
  autocmd InsertLeave * call s:DisableRelativeAutocomplete()
augroup END

if has('ide')
  nmap <leader>cn <Action>(GotoNextError)
  nmap <leader>cN <Action>(GotoPreviousError)
  nmap <leader>a <Action>(ShowIntentionActions)
  nmap <leader>f <Action>(ReformatCode)
  nmap <leader>i <Action>(OptimizeImports)
else
  nnoremap <leader>cn :cnext<cr>
  nnoremap <leader>cN :cprevious<cr>
  nnoremap <leader>a :ALECodeAction<cr>
  nnoremap <leader>f :ALEFix<cr>
  nnoremap <leader>i :CocCommand java.action.organizeImports<cr>
endif
" }}}

" Plugin settings {{{
" hardtime
let g:hardtime_allow_different_key = 1
let g:hardtime_default_on = 1
let g:list_of_disabled_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]

" OmniSharp
let g:OmniSharp_selector_ui = ''
let g:OmniSharp_loglevel = 'none' " workaround for log file path being in store
let g:OmniSharp_highlighting = 3

" ALE
let g:ale_linters = { 'cs': ['OmniSharp'], 'c': [], 'cpp': [], 'rust': ['analyzer'], 'java': [] }
let g:ale_fixers = { 'javascript': ['eslint'], 'rust': ['rustfmt'], 'terraform': ['terraform'] }
let g:ale_lint_on_text_changed = 'always'

if !empty($RA_TARGET)
  let g:ale_rust_analyzer_config = {'checkOnSave': {'command': 'clippy'}, 'cargo': {'target': $RA_TARGET}}
elseif !empty($RA_RUSTC)
  let g:ale_rust_analyzer_config = {
    \   'checkOnSave': {
    \     'overrideCommand': ['./x.py', 'check', '--json-output']
    \   },
    \   'rustfmt': {
    \     'overrideCommand': ['./build/x86_64-unknown-linux-gnu/stage0/bin/rustfmt']
    \   },
    \   'cargo': {
    \     'runBuildScripts': v:false
    \   },
    \   'rustcSrc': './Cargo.toml',
    \   'procMacro': {
    \     'enable': v:false
    \   }
    \ }
else
  let g:ale_rust_analyzer_config = {'checkOnSave': {'command': 'clippy'}}
endif

" Vimspector
let g:vimspector_base_dir = expand('$HOME/.vimspector')
let g:vimspector_enable_mappings = 'HUMAN'

" nvim-treesitter
lua <<EOF
local has_parsers, parsers = pcall(require, "nvim-treesitter.parsers")
if not has_parsers then return end

local parser_config = parsers.get_parser_configs()
parser_config.pioasm = {
  install_info = {
    url = "https://github.com/leo60228/tree-sitter-pioasm",
    branch = "main",
    files = {"src/parser.c", "src/scanner.c"}
  },
}

require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    custom_captures = {
      ["comment"] = "Comment",
      ["string.special"] = "Special",
      ["include"] = "Keyword",
      ["punctuation.delimiter"] = "NONE",
      ["punctuation.bracket"] = "NONE",
    },
  },
  playground = {
    enable = true,
  },
  refactor = {
    navigation = {
      enable = true,
    },
  },
  textobjects = {
    select = {
      enable = true,
      keymaps = {
        ["is"] = "@string.inner",
        ["as"] = { query = "@string", query_group = "highlights" },
      },
    },
  },
}
EOF

hi! link @variable Identifier

" vim-auto-save
let g:auto_save = 0

" nvim-echo-diagnostics
lua <<EOF
vim.diagnostic.config({virtual_text = false})

require("echo-diagnostics").setup {
    show_diagnostic_number = false,
    show_diagnostic_source = false,
}
EOF

" jupytext-nvim
lua <<EOF
require("jupytext").setup {
    format = "auto:percent",
}
EOF

" }}}

" Filetype commands {{{
augroup vimrc
    autocmd!

    autocmd FileType rust nnoremap <buffer> <localleader>c I// <esc>
    autocmd FileType rust nnoremap <buffer> <localleader>sr ^O#[serde(rename = "")]<esc>^ci"
    autocmd FileType vim nnoremap <buffer> <localleader>c I" <esc>

    autocmd FileType rust iabbrev <buffer> retu return
    autocmd FileType rust iabbrev <buffer> return <nop>

    autocmd FileType rust iabbrev <buffer> return <nop>

    autocmd FileType rust let b:auto_save = 1
    autocmd FileType scala let b:auto_save = 1

    autocmd BufRead,BufNewFile *.astro set filetype=astro
    autocmd BufRead,BufNewFile *.nix set filetype=nix
    autocmd BufRead,BufNewFile *.pio set filetype=pioasm

    autocmd FileType vim setlocal foldmethod=marker

    if !has('ide')
      autocmd FileType scala nnoremap <buffer> <leader>a :lua vim.lsp.buf.code_action()<cr>
      autocmd FileType scala nnoremap <buffer> <leader>f :lua vim.lsp.buf.formatting()<cr>

      autocmd CursorHold * lua require('echo-diagnostics').echo_line_diagnostic()
    endif
augroup END
" }}}
