{ neovim, tree-sitter, python3, vimPlugins, omnisharp-roslyn, callPackage, lib, fetchFromGitHub }:
let ftPlugins = with vimPlugins; [
        { plug = callPackage ./graphql.nix {}; ft = "graphql"; ext = "graphql"; }
        { plug = callPackage ./omnisharp-vim.nix {}; ft = "cs"; ext = "cs"; }
        { plug = vim-qml; ft = "qml"; ext = "qml"; init = "set smartindent"; }
        { plug = vim-toml; ft = "toml"; ext = "toml"; }
        { plug = vim-terraform; ft = "terraform"; ext = "tf"; }
        { plug = kotlin-vim; ft = "kotlin"; ext = "kts"; }
        { plug = callPackage ./vim-arduino.nix {}; ft = "arduino"; ext = "ino"; }
        { plug = coc-nvim; ft = "java"; ext = "java"; init = "let b:ale_disable_lsp = 1"; }
        { plug = coc-nvim; ft = "slint"; ext = "slint"; init = "set smartindent"; }
        { plug = nvim-metals; ft = "scala"; ext = "scala"; init = "lua require('metals').initialize_or_attach({})"; }
    ];
    plugins = builtins.attrNames (builtins.readDir ./vimrc.d);
in neovim.override {
    vimAlias = true;

    configure = {
        customRC = builtins.readFile ./vimrc
            + "\" LSP paths (autogenerated) {{{\n"
            + "let g:OmniSharp_server_path = '${omnisharp-roslyn}/bin/omnisharp'\n"
            + "\" }}}"
            + "\n\" Filetype plugins (autogenerated) {{{\n"
            + lib.concatMapStrings (x:
                "autocmd BufRead,BufNewFile *.${x.ext} packadd ${x.plug.pname} | set filetype=${x.ft}\n" +
                "autocmd FileType ${x.ft} packadd ${x.plug.pname}\n" +
                (if x ? init then "autocmd FileType ${x.ft} ${x.init}\n" else "")
            ) ftPlugins
            + "\" }}}\n\n\" vimrc.d/ contents:\n\n" + lib.concatMapStrings (x:
                "\" ${x}\n${(builtins.readFile (./vimrc.d + "/${x}"))}\n\n"
            ) plugins;

        packages.leovim = with vimPlugins; {
            start = [
                vim-abolish
                vim-hardtime
                editorconfig-vim
                vim-sleuth
                plenary-nvim
                (callPackage ./ale.nix {})
                (callPackage ./nvim-treesitter.nix {
                    grammars = {
                        inherit (tree-sitter.builtGrammars) tree-sitter-javascript tree-sitter-html tree-sitter-regex tree-sitter-pioasm;
                        tree-sitter-astro = callPackage ./grammar.nix {} {
                            language = "astro";
                            inherit (tree-sitter) version;
                            source = fetchFromGitHub {
                                owner = "virchau13";
                                repo = "tree-sitter-astro";
                                rev = "ec0f9f945a08372952403f736a1f783d1679b0ac";
                                sha256 = "brBbBmkHn0N9wu5Y6hatJhntZRVfBOwK4hIczPHVF6w=";
                            };
                        };
                        tree-sitter-nix = callPackage ./grammar.nix {} {
                            language = "nix";
                            inherit (tree-sitter) version;
                            source = fetchFromGitHub {
                                owner = "cstrahan";
                                repo = "tree-sitter-nix";
                                rev = "6b71a810c0acd49b980c50fc79092561f7cee307";
                                sha256 = "uTgSj4zz8WvzwIr7UO78F45nzVSjjitdtKY8GV4iL+w=";
                            };
                        };
                    };
                })
                (callPackage ./playground.nix {})
                (callPackage ./nvim-treesitter-refactor.nix {})
                vim-auto-save
                (callPackage ./nvim-echo-diagnostics.nix {})
                (callPackage ./nvim-textmate.nix {})
            ];

            opt = [
                (callPackage ./solarized8.nix {})
                (callPackage ./vimspector.nix {})
            ]
                ++ map (x: x.plug) ftPlugins;
        };
    };
}
