diff --git a/gui/covers.cpp b/gui/covers.cpp
index 447ae7c5..eaf09cfd 100644
--- a/gui/covers.cpp
+++ b/gui/covers.cpp
@@ -241,7 +241,7 @@ static inline QString albumKey(const Song& s)
 	if (isOnlineServiceImage(s)) {
 		return s.onlineService();
 	}
-	return "{" + s.albumArtist() + "}{" + s.albumId() + "}";
+	return s.entryName();
 }
 
 static inline QString artistKey(const Song& s)
@@ -291,7 +291,7 @@ static QString getScaledCoverName(const Song& song, int size, bool createDir)
 	}
 
 	QString dir = Utils::cacheDir(Covers::constScaledCoverDir + QString::number(size) + QLatin1Char('/') + Covers::encodeName(song.albumArtist()), createDir);
-	return dir.isEmpty() ? QString() : (dir + Covers::encodeName(song.albumId()) + constScaledExtension);
+	return dir.isEmpty() ? QString() : (dir + Covers::encodeName(song.entryName()) + constScaledExtension);
 }
 
 static void clearScaledCache(const Song& song)
@@ -1656,7 +1656,7 @@ static Covers::Image findCoverInDir(const Song& song, const QString& dirName, co
 				if (!song.isCdda() && !song.isArtistImageRequest()) {
 					QString dir = Utils::cacheDir(Covers::constCoverDir + Covers::encodeName(song.albumArtist()), true);
 					if (!dir.isEmpty()) {
-						QString fileName = dir + Covers::encodeName(song.album) + ".jpg";
+						QString fileName = dir + Covers::encodeName(song.entryName()) + ".jpg";
 						if (img.save(fileName)) {
 							return Covers::Image(img, fileName);
 						}
@@ -1885,7 +1885,7 @@ Covers::Image Covers::locateImage(const Song& song)
 	}
 	else {
 		QString artist = encodeName(song.albumArtist());
-		QString album = encodeName(song.album);
+		QString album = encodeName(song.entryName());
 		// For non-MPD tracks, see if we actually have a saved MPD cover...
 		if (MPDConnection::self()->getDetails().dirReadable) {
 			QString songDir = artist + Utils::constDirSep + album + Utils::constDirSep;
diff --git a/gui/currentcover.cpp b/gui/currentcover.cpp
index 9c2c7fe4..c05f16ad 100644
--- a/gui/currentcover.cpp
+++ b/gui/currentcover.cpp
@@ -209,7 +209,7 @@ void CurrentCover::update(const Song& s)
 		return;
 	}
 
-	if (s.albumArtist() != current.albumArtist() || s.album != current.album || s.isStream() != current.isStream() || s.onlineService() != current.onlineService()) {
+	if (s.albumArtist() != current.albumArtist() || s.album != current.album || s.isStream() != current.isStream() || s.onlineService() != current.onlineService() || s.entryName() != current.entryName()) {
 		current = s;
 		if (timer) {
 			timer->stop();
diff --git a/models/mpdlibrarymodel.cpp b/models/mpdlibrarymodel.cpp
index 7b82b515..a56c02f4 100644
--- a/models/mpdlibrarymodel.cpp
+++ b/models/mpdlibrarymodel.cpp
@@ -57,7 +57,7 @@ QVariant MpdLibraryModel::data(const QModelIndex& index, int role) const
 	switch (role) {
 	case Cantata::Role_ListImage: {
 		Item* item = static_cast<Item*>(index.internalPointer());
-		return T_Album == item->getType() || (T_Artist == item->getType() && useArtistImages());
+		return T_Album == item->getType() || (T_Artist == item->getType() && useArtistImages()) || T_Track == item->getType();
 	}
 	case Cantata::Role_GridCoverSong:
 	case Cantata::Role_CoverSong: {
@@ -66,6 +66,7 @@ QVariant MpdLibraryModel::data(const QModelIndex& index, int role) const
 		COVERS_DBUG << index.data().toString() << item->getType() << role;
 		switch (item->getType()) {
 		case T_Album:
+		case T_Track:
 			if (item->getSong().isEmpty()) {
 				Song song = static_cast<MpdLibraryDb*>(db)->getCoverSong(T_Album == topLevel() ? static_cast<AlbumItem*>(item)->getArtistId() : item->getParent()->getId(), item->getId());
 				if (song.isEmpty()) {
diff --git a/models/playlistsmodel.cpp b/models/playlistsmodel.cpp
index 09b62181..5eb3c3c4 100644
--- a/models/playlistsmodel.cpp
+++ b/models/playlistsmodel.cpp
@@ -360,6 +360,7 @@ QVariant PlaylistsModel::data(const QModelIndex& index, int role) const
 	}
 	else {
 		SongItem* s = static_cast<SongItem*>(item);
+		QVariant var;
 
 		switch (role) {
 		case Cantata::Role_ListImage:
@@ -371,9 +372,10 @@ QVariant PlaylistsModel::data(const QModelIndex& index, int role) const
 		case Cantata::Role_Key:
 			return s->key;
 		case Cantata::Role_CoverSong:
+			var.setValue(*static_cast<Song*>(s));
+			return var;
 		case Cantata::Role_SongWithRating:
 		case Cantata::Role_Song: {
-			QVariant var;
 			var.setValue(*s);
 			return var;
 		}
