#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bundix coreutils diffutils nix-prefetch-github gnused jq prefetch-yarn-deps
set -e

OWNER=BlaseballCrabs
REPO=mastodon

COMMIT_JSON="$(curl -SsL "https://api.github.com/repos/$OWNER/$REPO/branches/crabstodon")"
REVISION="$(jq -r '.commit.sha' <<< "$COMMIT_JSON")"
DATE="$(jq -r '.commit.commit.committer.date' <<< "$COMMIT_JSON")"
VERSION="unstable-$(date --date="$date" --iso-8601=date)"

rm -f gemset.nix source.nix
cd "$(dirname "${BASH_SOURCE[0]}")" || exit 1

WORK_DIR=$(mktemp -d)

# Check that working directory was created.
if [[ -z "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
    echo "Could not create temporary directory"
    exit 1
fi

# Delete the working directory on exit.
function cleanup {
    # Report errors, if any, from nix-prefetch-git
    grep "fatal" $WORK_DIR/nix-prefetch-git.out >/dev/stderr || true
    rm -rf "$WORK_DIR"
}
trap cleanup EXIT

echo "Fetching source code $REVISION"
JSON=$(nix-prefetch-github "$OWNER" "$REPO" --rev "$REVISION" 2> $WORK_DIR/nix-prefetch-git.out)
HASH=$(echo "$JSON" | jq -r .hash)

cat > source.nix << EOF
# This file was generated by pkgs.mastodon.updateScript.
{ fetchFromGitHub, applyPatches, patches ? [] }:
let
  version = "$VERSION";
in
(
  applyPatches {
    src = fetchFromGitHub {
      owner = "$OWNER";
      repo = "$REPO";
      rev = "$REVISION";
      hash = "$HASH";
    };
    patches = patches ++ [$PATCHES];
  }) // {
  inherit version;
  yarnHash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
}
EOF
SOURCE_DIR="$(nix-build --no-out-link -E '(import <nixpkgs> {}).callPackage ./source.nix {}')"

echo "Creating gemset.nix"
bundix --lockfile="$SOURCE_DIR/Gemfile.lock" --gemfile="$SOURCE_DIR/Gemfile"
echo "" >> gemset.nix  # Create trailing newline to please EditorConfig checks

#echo "Creating yarn-hash.nix"
#YARN_HASH="$(prefetch-yarn-deps "$SOURCE_DIR/yarn.lock")"
#YARN_HASH="$(nix hash to-sri --type sha256 "$YARN_HASH")"
#sed -i "s/sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=/$YARN_HASH/g" source.nix
